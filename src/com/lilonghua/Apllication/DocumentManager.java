/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.lilonghua.Apllication;

import com.lilonghua.lucene.ComplexFiles;
import com.lilonghua.lucene.LuceneFile;
import com.lilonghua.lucene.LuceneSearch;
import com.lilonghua.spider.LuceneHtml;
import com.lilonghua.spider.TextController;
import com.lilonghua.utils.CSVFile;
import com.lilonghua.utils.Tools;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import static java.awt.image.ImageObserver.HEIGHT;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultCellEditor;
import javax.swing.JFileChooser;
import static javax.swing.JFileChooser.FILES_AND_DIRECTORIES;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import org.apache.log4j.Logger;

/**
 *
 * @author wpf
 */
public class DocumentManager extends javax.swing.JFrame {

    /**
     * Creates new form DocumentManager
     */
    public DocumentManager() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanelCheckBox = new javax.swing.JPanel();
        jCheckBoxPDF = new javax.swing.JCheckBox();
        jCheckBoxWORD = new javax.swing.JCheckBox();
        jCheckBoxPPT = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jComboBoxSelect = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldContent = new javax.swing.JTextField();
        jButtonSearch = new javax.swing.JButton();
        jTextFieldoffset = new javax.swing.JTextField();
        jLabelPage = new javax.swing.JLabel();
        jLabelPageSize = new javax.swing.JLabel();
        jLabelPageNU = new javax.swing.JLabel();
        jButtonNext = new javax.swing.JButton();
        jButtonPre = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableResult = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        jMenuItemOpenFile = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        jMenuAction = new javax.swing.JMenu();
        jMenuItemBuild = new javax.swing.JMenuItem();
        jMenuItemDoFileRead = new javax.swing.JMenuItem();
        jMenuModel = new javax.swing.JMenu();
        jRadioButtonMenuItemFileModel = new javax.swing.JRadioButtonMenuItem();
        jRadioButtonMenuItemSpiderModel = new javax.swing.JRadioButtonMenuItem();
        jMenuFileSelector = new javax.swing.JMenu();
        jMenuItemFileSelectorCSV = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("索引"));

        jPanelCheckBox.setBorder(javax.swing.BorderFactory.createTitledBorder("选择索引文件类型"));

        jCheckBoxPDF.setSelected(true);
        jCheckBoxPDF.setText("PDF");

        jCheckBoxWORD.setText("WORD");

        jCheckBoxPPT.setText("PPT");

        javax.swing.GroupLayout jPanelCheckBoxLayout = new javax.swing.GroupLayout(jPanelCheckBox);
        jPanelCheckBox.setLayout(jPanelCheckBoxLayout);
        jPanelCheckBoxLayout.setHorizontalGroup(
            jPanelCheckBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCheckBoxLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelCheckBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBoxPDF)
                    .addComponent(jCheckBoxWORD)
                    .addComponent(jCheckBoxPPT))
                .addContainerGap(52, Short.MAX_VALUE))
        );
        jPanelCheckBoxLayout.setVerticalGroup(
            jPanelCheckBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCheckBoxLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jCheckBoxPDF)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxWORD)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxPPT))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("查询"));

        jLabel1.setText("查询字段");

        jComboBoxSelect.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "内 容", "文件名", "标 题", "关键字" }));

        jLabel2.setText("查询内容");

        jButtonSearch.setText("查询");
        jButtonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchActionPerformed(evt);
            }
        });

        jTextFieldoffset.setText("20");
        jTextFieldoffset.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldoffsetFocusLost(evt);
            }
        });

        jLabelPage.setText("显示条数");

        jLabelPageSize.setText("总页数：");

        jLabelPageNU.setText("当前页码：");

        jButtonNext.setText("下一页");
        jButtonNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNextActionPerformed(evt);
            }
        });

        jButtonPre.setText("上一页");
        jButtonPre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPreActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(29, 29, 29)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jComboBoxSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43)
                        .addComponent(jLabelPage)
                        .addGap(18, 18, 18)
                        .addComponent(jTextFieldoffset, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(jLabelPageSize)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelPageNU)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonNext)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonPre))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jTextFieldContent, javax.swing.GroupLayout.PREFERRED_SIZE, 507, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonSearch)))
                .addContainerGap(122, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldoffset, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelPage)
                    .addComponent(jLabelPageSize)
                    .addComponent(jLabelPageNU)
                    .addComponent(jButtonNext)
                    .addComponent(jButtonPre))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                    .addComponent(jTextFieldContent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSearch))
                .addGap(22, 22, 22))
        );

        jTableResult.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "路 径", "作 者", "标 题", "关键字", "创建日期"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableResult.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTableResultMousePressed(evt);
            }
        });
        jScrollPane2.setViewportView(jTableResult);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 402, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanelCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("操作记录"));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 928, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
        );

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        openMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open Index Dir");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        jMenuItemOpenFile.setText("Open File");
        jMenuItemOpenFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOpenFileActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItemOpenFile);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        jMenuAction.setText("Action");

        jMenuItemBuild.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        jMenuItemBuild.setText("Build Index");
        jMenuItemBuild.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemBuildActionPerformed(evt);
            }
        });
        jMenuAction.add(jMenuItemBuild);

        jMenuItemDoFileRead.setText("Do Read");
        jMenuItemDoFileRead.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDoFileReadActionPerformed(evt);
            }
        });
        jMenuAction.add(jMenuItemDoFileRead);

        menuBar.add(jMenuAction);

        jMenuModel.setText("Model");

        jRadioButtonMenuItemFileModel.setSelected(true);
        jRadioButtonMenuItemFileModel.setText("FileModel");
        jRadioButtonMenuItemFileModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonMenuItemFileModelActionPerformed(evt);
            }
        });
        jMenuModel.add(jRadioButtonMenuItemFileModel);

        jRadioButtonMenuItemSpiderModel.setText("SpiderModel");
        jRadioButtonMenuItemSpiderModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonMenuItemSpiderModelActionPerformed(evt);
            }
        });
        jMenuModel.add(jRadioButtonMenuItemSpiderModel);

        jMenuFileSelector.setText("FileSelector");

        jMenuItemFileSelectorCSV.setText("CSV");
        jMenuItemFileSelectorCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFileSelectorCSVActionPerformed(evt);
            }
        });
        jMenuFileSelector.add(jMenuItemFileSelectorCSV);

        jMenuModel.add(jMenuFileSelector);

        menuBar.add(jMenuModel);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        if (this.jRadioButtonMenuItemFileModel.isSelected()) {
            LuceneFile.Close();
        } else {
            LuceneHtml.Close();
        }
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        // TODO add your handling code here:
        int result = 0; // 接收操作状态
        JFileChooser fileChooser = new JFileChooser(); // 文件选择框
        //设置当前目录 
        //fileChooser.setCurrentDirectory(new File("."));

        fileChooser.setApproveButtonText("确定");
        fileChooser.setDialogTitle("打开文件");

        if (this.jRadioButtonMenuItemFileModel.isSelected()) {
            //如果能够一次打开多个文件 
            fileChooser.setMultiSelectionEnabled(true);
            //默认只能选择文件，可以设置选择目录等 
            fileChooser.setFileSelectionMode(FILES_AND_DIRECTORIES);
        } else {
            filter = new FileNameExtensionFilter("txt文件(*.txt)", "txt");
            fileChooser.setFileFilter(filter);
        }
        result = fileChooser.showOpenDialog(this.rootPane);
        if (result == JFileChooser.APPROVE_OPTION) { // 选择的是确定按钮
            if (this.jRadioButtonMenuItemFileModel.isSelected()) {
                sourcePath = fileChooser.getCurrentDirectory().getPath(); // 得到选择的文件
                this.jTextArea1.append(Tools.getLogger("当前目录 " + sourcePath));
            } else {
                sourcePath = fileChooser.getSelectedFile().getPath(); // 得到选择的文件
                this.jTextArea1.append(Tools.getLogger("当前目录 " + sourcePath));
            }
        } else if (result == JFileChooser.CANCEL_OPTION) {
            this.jTextArea1.append(Tools.getLogger("没有选择任何文件"));
        } else {
            this.jTextArea1.append(Tools.getLogger("操作失败"));
        }
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void jMenuItemBuildActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemBuildActionPerformed
        // TODO add your handling code here:
        final List<String> fileExt = new ArrayList<>();

        if (this.jRadioButtonMenuItemFileModel.isSelected()) {
            if (this.jCheckBoxPDF.isSelected()) {
                fileExt.add("pdf");
            }
            if (this.jCheckBoxWORD.isSelected()) {
                fileExt.add("doc");
            }
            if (this.jCheckBoxPPT.isSelected()) {
                fileExt.add("ppt");
            }
            if (fileExt.isEmpty()) {
                JOptionPane.showMessageDialog(null, "请选择建立索引的文件类型！", "操作错误提醒", JOptionPane.ERROR_MESSAGE);
                return;
            }

            this.jTextArea1.append(Tools.getLogger(fileExt.toString()));
        }

        this.jTextArea1.append(Tools.getLogger("索引文件进行中......."));
        if (this.jRadioButtonMenuItemFileModel.isSelected()) {
            SwingWorker<Object,Void> worker = new SwingWorker<Object,Void>() {
                @Override
                protected Object doInBackground() {
                    try {
                        ComplexFiles.indexFiles(sourcePath, indexPath, fileExt);                    
                        jTextArea1.append(Tools.getLogger("文件索引建立完毕！"));
                    } catch (IOException ex) {
                        LuceneFile.Close();
                       logger.fatal("索引文件失败", ex);
                    }
                    return null;
                }
            };            
            worker.execute();
        } else {
            SwingWorker<Object,Void> worker = new SwingWorker<Object,Void>() {
                @Override
                protected Object doInBackground(){
                    try {
                        TextController.indexNetBySpider(sourcePath, indexPath);                   
                        jTextArea1.append(Tools.getLogger("文件索引建立完毕！"));
                    } catch (IOException ex) {
                        LuceneHtml.Close();
                        logger.fatal("索引文件失败", ex);
                    }
                    return null;
                }
            };            
            worker.execute();
        }      
    }//GEN-LAST:event_jMenuItemBuildActionPerformed

    private void jButtonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchActionPerformed
        // TODO add your handling code here:
        String searchItem = this.jComboBoxSelect.getModel().getSelectedItem().toString();
        this.searchContents = this.jTextFieldContent.getText();

        if (searchItem.isEmpty() || searchItem.trim().isEmpty() || searchContents.isEmpty()) {
            JOptionPane.showMessageDialog(null, "请输入查询内容！", "操作错误提醒", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        String[] search = {"contents"};
        switch (searchItem.trim()) {
            case "内容":
                search[0] = "contents";
                break;
            case "文件名":
                search[0] = "path";
                break;
            case "标 题":
                search[0] = "Title";
                break;
            case "标题":
                search[0] = "Title";
                break;
            case "关键字":
                search[0] = "Keywords";
                break;
        }
        this.searchFeilds = search;
        this.jTextArea1.append(Tools.getLogger("当前检索的字段为：" + searchItem));

        //List<Map<String,Object>> resultList = ComplexFiles.searchFiles(search, searchContents);
        List<Map<String, Object>> resultList = new ArrayList<>();

        if (this.jRadioButtonMenuItemFileModel.isSelected()) {
            resultList = LuceneSearch.searchFiles(searchFeilds, searchContents, 0, offset);
        } else {
            resultList = LuceneSearch.searchHtml(searchFeilds, searchContents, 0, offset);
        }

//        if(resultList.size()<2)
//            return;

        int hitSize = resultList.size() - 1;
        int total = Integer.parseInt(resultList.get(hitSize).get("Total").toString());
        this.pageSize = (total - 1) / this.offset + 1;
        this.pageNU = 1;
        this.jLabelPageSize.setText("总页数：" + String.valueOf(this.pageSize));
        this.jLabelPageNU.setText("当前页码：" + String.valueOf(1));

        DefaultTableModel model = new DefaultTableModel(hitSize, tName.length);
        model.setColumnIdentifiers(tName);

        for (int i = 0; i < hitSize; i++) {
            model.setValueAt(i + 1, i, 0);
            model.setValueAt(resultList.get(i).get("Path"), i, 1);
            if (this.jRadioButtonMenuItemFileModel.isSelected()) {
                model.setValueAt(resultList.get(i).get("Author"), i, 2);
                model.setValueAt(resultList.get(i).get("Title"), i, 3);
                model.setValueAt(resultList.get(i).get("Keywords"), i, 4);
                model.setValueAt(resultList.get(i).get("ModificationDate"), i, 5);
            } else {
                model.setValueAt(resultList.get(i).get("Title"), i, 2);
            }
        }

        this.jTableResult.setModel(model);
        this.jTableResult.setRowHeight(HEIGHT * 12);
        //this.jTableResult.setEnabled(false);
        DefaultCellEditor objectDefaultCellEditor = null;
        if (this.jRadioButtonMenuItemSpiderModel.isSelected()) {
            objectDefaultCellEditor = new DefaultCellEditor(new TableEditeModel(true));
        } else {
            objectDefaultCellEditor = new DefaultCellEditor(new TableEditeModel(false));
        }
        this.jTableResult.setDefaultEditor(Object.class, objectDefaultCellEditor);

        if (this.pageNU >= this.pageSize) {
            this.jButtonNext.setVisible(false);
        } else {
            this.jButtonNext.setVisible(true);
        }
        
        if (this.pageNU <= 1) {
            this.jButtonPre.setVisible(false);
        } else {
            this.jButtonPre.setVisible(true);
        }

        this.jTextArea1.append(Tools.getLogger("检索到记录条数为：" + hitSize));
    }//GEN-LAST:event_jButtonSearchActionPerformed

    private void jTextFieldoffsetFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldoffsetFocusLost
        // TODO add your handling code here:
        String offsetStr = this.jTextFieldoffset.getText();

        if (offsetStr.isEmpty() || offsetStr.trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "请输入每页显示条数！", "操作错误提醒", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        for (int i = offsetStr.length(); --i >= 0;) {
            if (!Character.isDigit(offsetStr.charAt(i))) {
                JOptionPane.showMessageDialog(null, "每页显示条数位数字，请正确输入！", "操作错误提醒", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
        }

        offset = Integer.parseInt(offsetStr);

        if (offset < 1) {
            offset = 20;
            JOptionPane.showMessageDialog(null, "请正确输入每页显示条数！", "操作错误提醒", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jTextFieldoffsetFocusLost

    private void jButtonNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNextActionPerformed
        // TODO add your handling code here:
        this.pageNU++;
        int hitSize = 0;
        DefaultTableModel model = null;

        if (this.jMenuItemFileSelectorCSV.isSelected()) {
            
            if (csv == null) return;
            List<String[]> resultList = csv.getResultList();
            hitSize = resultList.size() - 1;
            int endIndex = pageNU * offset;
            if (endIndex > hitSize) endIndex = hitSize;
            List<String[]> subList = csv.getResultList().subList((pageNU - 1) * offset, endIndex);
            String[] cName = csv.getcName();
          
            hitSize = subList.size();
            this.jLabelPageNU.setText("当前页码：" + String.valueOf(pageNU));

            model = new DefaultTableModel(hitSize, cName.length);
            model.setColumnIdentifiers(cName);

            for (int i = 0; i < hitSize; i++) {
                for (int j = 0; j < subList.get(i).length; j++) {
                    model.setValueAt(subList.get(i)[j], i, j);
                }
            }
        } else {
            List<Map<String, Object>> resultList = new ArrayList<>();
            if (searchFeilds == null) return;

            if (this.jRadioButtonMenuItemFileModel.isSelected()) {
                resultList.addAll(LuceneSearch.searchFiles(searchFeilds, searchContents, (pageNU - 1) * offset, offset));
            } else {
                resultList.addAll(LuceneSearch.searchHtml(searchFeilds, searchContents, (pageNU - 1) * offset, offset));
            }

            hitSize = resultList.size() - 1;
            if (hitSize == 0) return;
            this.jLabelPageNU.setText("当前页码：" + String.valueOf(pageNU));

            model = new DefaultTableModel(hitSize, tName.length);
            model.setColumnIdentifiers(tName);

            for (int i = 0; i < hitSize; i++) {
                model.setValueAt(i + 1, i, 0);
                model.setValueAt(resultList.get(i).get("Path"), i, 1);
                if (this.jRadioButtonMenuItemFileModel.isSelected()) {
                    model.setValueAt(resultList.get(i).get("Author"), i, 2);
                    model.setValueAt(resultList.get(i).get("Title"), i, 3);
                    model.setValueAt(resultList.get(i).get("Keywords"), i, 4);
                    model.setValueAt(resultList.get(i).get("ModificationDate"), i, 5);
                } else {
                    model.setValueAt(resultList.get(i).get("Title"), i, 2);
                }
            }
        }

        this.jTableResult.setModel(model);
        this.jTableResult.setRowHeight(HEIGHT * 12);

        if (this.pageNU >= this.pageSize) {
            this.jButtonNext.setVisible(false);
        } else {
            this.jButtonNext.setVisible(true);
        }
        
        if (this.pageNU <= 1) {
            this.jButtonPre.setVisible(false);
        } else {
            this.jButtonPre.setVisible(true);
        }

        this.jTextArea1.append(Tools.getLogger("检索到记录条数为：" + hitSize));
    }//GEN-LAST:event_jButtonNextActionPerformed

    private void jRadioButtonMenuItemSpiderModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItemSpiderModelActionPerformed
        // TODO add your handling code here:
        this.jRadioButtonMenuItemFileModel.setSelected(false);
        this.jRadioButtonMenuItemSpiderModel.setSelected(true);
        this.jMenuItemFileSelectorCSV.setSelected(false);
        this.openMenuItem.setText("Open Seeds File");
        this.jLabel1.setText("查询字段");
        this.jLabel2.setText("查询内容");
        this.jPanelCheckBox.setVisible(false);
        this.jComboBoxSelect.setVisible(false);
        String[] cName = {"ID", "网 址", "标 题"};
        this.tName = cName;

        DefaultCellEditor objectDefaultCellEditor = new DefaultCellEditor(new TableEditeModel(true));
        this.jTableResult.setDefaultEditor(Object.class, objectDefaultCellEditor);
    }//GEN-LAST:event_jRadioButtonMenuItemSpiderModelActionPerformed

    private void jRadioButtonMenuItemFileModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItemFileModelActionPerformed
        // TODO add your handling code here:
        this.jRadioButtonMenuItemSpiderModel.setSelected(false);
        this.jRadioButtonMenuItemFileModel.setSelected(true);
        this.jMenuItemFileSelectorCSV.setSelected(false);
        this.openMenuItem.setText("Open Index Dir");
        this.jPanelCheckBox.setVisible(true);
        this.jComboBoxSelect.setVisible(true);
        this.jLabel1.setText("查询字段");
        this.jLabel2.setText("查询内容");
        String[] cName = {"ID", "路 径", "创建者", "标 题", "关键字", "创建日期"};
        this.tName = cName;
        DefaultCellEditor objectDefaultCellEditor = new DefaultCellEditor(new TableEditeModel(false));
        this.jTableResult.setDefaultEditor(Object.class, objectDefaultCellEditor);
    }//GEN-LAST:event_jRadioButtonMenuItemFileModelActionPerformed

    private void jMenuItemFileSelectorCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFileSelectorCSVActionPerformed
        // TODO add your handling code here:
        this.jMenuFileSelector.setSelected(true);
        this.jMenuItemFileSelectorCSV.setSelected(true);
        this.jRadioButtonMenuItemSpiderModel.setSelected(false);
        this.jRadioButtonMenuItemFileModel.setSelected(false);
        this.openMenuItem.setText("Open File Dir");
        this.jPanelCheckBox.setVisible(false);
        this.jComboBoxSelect.setVisible(false);
        this.jButtonSearch.setVisible(false);
        this.jLabel1.setText("文件类型为：CSV");
        this.jLabel2.setText("当前处理文件为：");
        this.jTextFieldContent.setEditable(false);
        String[] cName = {"ID", "路 径", "创建者", "标 题", "关键字", "创建日期"};
        this.tName = cName;
        DefaultCellEditor objectDefaultCellEditor = new DefaultCellEditor(new TableEditeModel(false));
        this.jTableResult.setDefaultEditor(Object.class, objectDefaultCellEditor);
        this.jTextArea1.append(Tools.getLogger("当前模式为操作CSV文件"));
    }//GEN-LAST:event_jMenuItemFileSelectorCSVActionPerformed

    private void jMenuItemOpenFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOpenFileActionPerformed
        // TODO add your handling code here:
         int result = 0; // 接收操作状态
        JFileChooser fileChooser = new JFileChooser(); // 文件选择框
        //设置当前目录 
        //fileChooser.setCurrentDirectory(new File("."));

        fileChooser.setApproveButtonText("确定");
        fileChooser.setDialogTitle("打开文件");
 
        filter = new FileNameExtensionFilter("csv文件(*.csv)", "csv");
        fileChooser.setFileFilter(filter);

        result = fileChooser.showOpenDialog(this.rootPane);
        if (result == JFileChooser.APPROVE_OPTION) { // 选择的是确定按钮
            sourcePath = fileChooser.getSelectedFile().getPath(); // 得到选择的文件
            this.jTextFieldContent.setText(sourcePath);
            this.jTextArea1.append(Tools.getLogger("当前处理文件为： " + sourcePath));
        } else if (result == JFileChooser.CANCEL_OPTION) {
            this.jTextArea1.append(Tools.getLogger("没有选择任何文件"));
        } else {
            this.jTextArea1.append(Tools.getLogger("操作失败"));
        }
    }//GEN-LAST:event_jMenuItemOpenFileActionPerformed

    private void jMenuItemDoFileReadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDoFileReadActionPerformed
        // TODO add your handling code here:
        if (!this.jMenuItemFileSelectorCSV.isSelected()){
            this.jMenuFileSelector.setSelected(true);
            this.jMenuItemFileSelectorCSV.setSelected(true);
            this.jRadioButtonMenuItemSpiderModel.setSelected(false);
            this.jRadioButtonMenuItemFileModel.setSelected(false);
            this.openMenuItem.setText("Open File Dir");
            this.jPanelCheckBox.setVisible(false);
            this.jComboBoxSelect.setVisible(false);
            this.jButtonSearch.setVisible(false);
            this.jLabel1.setText("文件类型为：CSV");
            this.jLabel2.setText("当前处理文件为：");
            this.jTextFieldContent.setEditable(false);
        }
       csv = new CSVFile();
        try {
            csv.readFile(sourcePath);
        } catch (Exception ex) {
            Tools.getLogger(DocumentManager.class.getName() + ex);
            return;
        }
        List<String[]> resultList = csv.getResultList();
        String[] cName = csv.getcName();
        
        this.pageSize = (resultList.size() - 1) / this.offset + 1;
        this.pageNU = 1;
        this.jLabelPageSize.setText("总页数：" + String.valueOf(this.pageSize));
        this.jLabelPageNU.setText("当前页码：" + String.valueOf(1));
        int hitSize = resultList.size() - 1;
        this.jLabelPageNU.setText("当前页码：" + String.valueOf(pageNU));

        DefaultTableModel model = new DefaultTableModel(hitSize, cName.length);
        model.setColumnIdentifiers(cName);

        for (int i = 0; i < hitSize; i++) {
            for(int j = 0; j < resultList.get(i).length; j++){
                 model.setValueAt(resultList.get(i)[j], i, j);
            }           
        }
        
        //this.jTableResult.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        //this.jTableResult.getTableHeader().setReorderingAllowed(false);

        this.jTableResult.setColumnSelectionAllowed(true);
        this.jTableResult.setRowSelectionAllowed(false);
        final JTableHeader header =this.jTableResult.getTableHeader(); 
        //表头增加监听  
        header.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                if (!e.isShiftDown()) {
                    jTableResult.clearSelection();
                }
                //获取点击的列索引  
                int pick = header.columnAtPoint(e.getPoint());
                //设置选择模型  
                jTableResult.addColumnSelectionInterval(pick, pick);
                jTextArea1.append(Tools.getLogger("当前选中列为：" + pick));
            }
        });
        this.jTableResult.setModel(model);
        this.jTableResult.setRowHeight(HEIGHT * 12);
        
        DefaultCellEditor objectDefaultCellEditor = null;
        if (this.jRadioButtonMenuItemSpiderModel.isSelected()) {
            objectDefaultCellEditor = new DefaultCellEditor(new TableEditeModel(true));
        } else {
            objectDefaultCellEditor = new DefaultCellEditor(new TableEditeModel(false));
        }
        this.jTableResult.setDefaultEditor(Object.class, objectDefaultCellEditor);      

        if (this.pageNU >= this.pageSize) {
            this.jButtonNext.setVisible(false);
        } else {
            this.jButtonNext.setVisible(true);
        }
        
        if (this.pageNU <= 1) {
            this.jButtonPre.setVisible(false);
        } else {
            this.jButtonPre.setVisible(true);
        }

        this.jTextArea1.append(Tools.getLogger("检索到记录条数为：" + hitSize));
    }//GEN-LAST:event_jMenuItemDoFileReadActionPerformed

    private void jButtonPreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPreActionPerformed
        // TODO add your handling code here:
        this.pageNU--;
        int hitSize = 0;
        DefaultTableModel model = null;

        if (this.jMenuItemFileSelectorCSV.isSelected()) {
            if (csv == null) return;
            List<String[]> resultList = csv.getResultList();
            hitSize = resultList.size() - 1;
            int endIndex = pageNU * offset;
            if (endIndex > hitSize) endIndex = hitSize;
            List<String[]> subList = csv.getResultList().subList((pageNU - 1) * offset, endIndex);
            String[] cName = csv.getcName();
          
            hitSize = subList.size();
            this.jLabelPageNU.setText("当前页码：" + String.valueOf(pageNU));

            model = new DefaultTableModel(hitSize, cName.length);
            model.setColumnIdentifiers(cName);

            for (int i = 0; i < hitSize; i++) {
                for (int j = 0; j < subList.get(i).length; j++) {
                    model.setValueAt(subList.get(i)[j], i, j);
                }
            }
        } else {
            List<Map<String, Object>> resultList = new ArrayList<>();
            if (searchFeilds == null) return;

            if (this.jRadioButtonMenuItemFileModel.isSelected()) {
                resultList.addAll(LuceneSearch.searchFiles(searchFeilds, searchContents, (pageNU - 1) * offset, offset));
            } else {
                resultList.addAll(LuceneSearch.searchHtml(searchFeilds, searchContents, (pageNU - 1) * offset, offset));
            }

            hitSize = resultList.size() - 1;
            this.jLabelPageNU.setText("当前页码：" + String.valueOf(pageNU));

            model = new DefaultTableModel(hitSize, tName.length);
            model.setColumnIdentifiers(tName);

            for (int i = 0; i < hitSize; i++) {
                model.setValueAt(i + 1, i, 0);
                model.setValueAt(resultList.get(i).get("Path"), i, 1);
                if (this.jRadioButtonMenuItemFileModel.isSelected()) {
                    model.setValueAt(resultList.get(i).get("Author"), i, 2);
                    model.setValueAt(resultList.get(i).get("Title"), i, 3);
                    model.setValueAt(resultList.get(i).get("Keywords"), i, 4);
                    model.setValueAt(resultList.get(i).get("ModificationDate"), i, 5);
                } else {
                    model.setValueAt(resultList.get(i).get("Title"), i, 2);
                }
            }
        }

        this.jTableResult.setModel(model);
        this.jTableResult.setRowHeight(HEIGHT * 12);

        if (this.pageNU >= this.pageSize) {
            this.jButtonNext.setVisible(false);
        } else {
            this.jButtonNext.setVisible(true);
        }
        
        if (this.pageNU <= 1) {
            this.jButtonPre.setVisible(false);
        } else {
            this.jButtonPre.setVisible(true);
        }

        this.jTextArea1.append(Tools.getLogger("检索到记录条数为：" + hitSize));
    }//GEN-LAST:event_jButtonPreActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        // TODO add your handling code here:
        JFileChooser fd = new JFileChooser();
        fd.addChoosableFileFilter(filter);
        fd.showSaveDialog(null);
        File f = fd.getSelectedFile();
        String savePath = null;
        if (this.jMenuItemFileSelectorCSV.isSelected() && csv != null){
            savePath = f.getAbsolutePath() + ".csv";
            List<String[]> saveList = new ArrayList<>();
            saveList.add(csv.getcName());
            saveList.addAll(csv.getResultList());
            try {
                csv.writeFile(savePath, saveList);
                this.jTextArea1.append(Tools.getLogger("保存CSV文件成功！"+savePath));
            } catch (IOException ex) {
                this.jTextArea1.append(Tools.getLogger("保存CSV文件失败！"));
                logger.error("保存CSV文件失败", ex);
            }
        }
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void jTableResultMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableResultMousePressed
        // TODO add your handling code here:
       if (SwingUtilities.isRightMouseButton(evt)) {  
                JPopupMenu popMenu = null ;  
                JTable table = (JTable) evt.getComponent();  
                //获取鼠标右键选中的行  
                //int row = table.rowAtPoint(evt.getPoint());
                int column = table.columnAtPoint(evt.getPoint());
                if (column == -1) {  
                    return ;  
                }  
                //获取已选中的行  
                int[] columns = table.getSelectedColumns();
                boolean inSelected = false ;  
                //判断当前右键所在行是否已选中  
                for(int c : columns){  
                    if(column == c){  
                        inSelected = true ;  
                        break ;  
                    }  
                }  
                //当前鼠标右键点击所在行不被选中则高亮显示选中行  
                if(!inSelected){  
                    table.setColumnSelectionInterval(column, column);  
                }  
                //生成右键菜单  
                popMenu =  new JPopupMenu();
                JMenuItem copy = new JMenuItem("复制");
                JMenuItem cut = cutMenuItem;
                popMenu.add(cut);
                popMenu.add(deleteMenuItem);
                popMenu.show(evt.getComponent(), evt.getX(), evt.getY());  
            }  
    }//GEN-LAST:event_jTableResultMousePressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.error("系统启动出错", ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new DocumentManager().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JButton jButtonNext;
    private javax.swing.JButton jButtonPre;
    private javax.swing.JButton jButtonSearch;
    private javax.swing.JCheckBox jCheckBoxPDF;
    private javax.swing.JCheckBox jCheckBoxPPT;
    private javax.swing.JCheckBox jCheckBoxWORD;
    private javax.swing.JComboBox jComboBoxSelect;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelPage;
    private javax.swing.JLabel jLabelPageNU;
    private javax.swing.JLabel jLabelPageSize;
    private javax.swing.JMenu jMenuAction;
    private javax.swing.JMenu jMenuFileSelector;
    private javax.swing.JMenuItem jMenuItemBuild;
    private javax.swing.JMenuItem jMenuItemDoFileRead;
    private javax.swing.JMenuItem jMenuItemFileSelectorCSV;
    private javax.swing.JMenuItem jMenuItemOpenFile;
    private javax.swing.JMenu jMenuModel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanelCheckBox;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItemFileModel;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItemSpiderModel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableResult;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextFieldContent;
    private javax.swing.JTextField jTextFieldoffset;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    // End of variables declaration//GEN-END:variables
    private static final Logger logger = Logger.getLogger(DocumentManager.class.getName());
    private FileNameExtensionFilter filter = null;
    private String sourcePath = null;
    private String indexPath = null;
    private String[] searchFeilds = null;
    private String searchContents = null;
    private String[] tName = {"ID", "路 径", "创建者", "标 题", "关键字", "创建日期"};
    private int offset = 20;
    private int pageSize = 0;
    private int pageNU = 0;
    private CSVFile csv = null;
}
